name: ci-policies-test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Schedule cronjob every 1 hour
  schedule:
    - cron: '*/120 * * * *'

jobs:
  # This workflow contains a single job called "build"
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setting up k8s cluster and generating policies
        run: |
          echo Install k3s cluster...
          curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='--flannel-backend=none --disable traefik' sh -s - --write-kubeconfig-mode 644
          sleep 10

          echo Make k3s cluster config default...
          mkdir ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          curl -sfL https://raw.githubusercontent.com/kubearmor/kubearmor-client/main/install.sh | sudo sh -s -- -b /usr/local/bin

          echo Install cilium cli tool...
          curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum}
          sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin

          echo Install Daemonsets and Services...
          curl -s https://raw.githubusercontent.com/accuknox/tools/main/install.sh | bash

          echo Waiting for kubearmor-relay to be ready...
          kubectl wait --for=condition=ready pod -l kubearmor-app=kubearmor-relay --timeout=180s --namespace kube-system

          echo Waiting for kubearmor to be ready...
          kubectl wait --for=condition=ready pod -l kubearmor-app=kubearmor --timeout=180s --namespace kube-system

          echo Waiting for knoxautopolicy to be ready...
          kubectl wait --for=condition=ready pod -l container=knoxautopolicy --timeout=180s --namespace explorer

          echo Checking status...
          kubectl get pods -A

          echo Waiting for hubble-relay to be ready...
          kubectl wait --for=condition=ready pod -l k8s-app=hubble-relay --timeout=180s --namespace kube-system

          echo Install sample k8s application...
          kubectl apply -f https://raw.githubusercontent.com/kubearmor/KubeArmor/main/examples/wordpress-mysql/wordpress-mysql-deployment.yaml

          echo Waiting for wordpress to be ready...
          kubectl wait --for=condition=ready pod -l app=wordpress --timeout=180s --namespace wordpress-mysql

          echo Waiting for wordpress-mysql to be ready...
          kubectl wait --for=condition=ready pod -l app=mysql --timeout=180s --namespace wordpress-mysql

          echo Checking status...
          kubectl get pods -A

          echo sleeping...
          sleep 5
          kubectl exec -n explorer $(kubectl get pods -n explorer -l container=knoxautopolicy -o custom-columns=:metadata.name) -- ls /
          sleep 5
          kubectl exec -n explorer $(kubectl get pods -n explorer -l container=knoxautopolicy -o custom-columns=:metadata.name) -- find /home
          sleep 5
          kubectl exec -n explorer $(kubectl get pods -n explorer -l container=knoxautopolicy -o custom-columns=:metadata.name) -- find /home
          sleep 20

          echo After sleep...
          kubectl get pods -A
          echo Get Auto discovered policies...
          curl -s https://raw.githubusercontent.com/accuknox/tools/main/get_discovered_yamls.sh | bash

      - name: List Kubearmor policies
        run: |
            ls -d kubearmor_policies_default*

      - name: Display kubearmor_policies_default_explorer_knoxautopolicy
        run: |
            cat kubearmor_policies_default_explorer_knoxautopolicy*

      - name: Display kubearmor_policies_default_explorer_mysql
        run: |
            cat kubearmor_policies_default_explorer_mysql*

      - name: Display kubearmor_policies_default_wordpress-mysql_mysql
        run: |
            cat kubearmor_policies_default_wordpress-mysql_mysql*

      - name: Display kubearmor_policies_default_wordpress-mysql_wordpress
        run: |
            cat kubearmor_policies_default_wordpress-mysql_wordpress*

      - name: Display cilium policies
        run: |
            cat cilium_policies.yaml

      - name: Get Artifacts
        if: ${{ always() }}
        run: |
          kubectl get pods,svc -A -o wide > /tmp/k8s-status.txt
          kubectl describe pod -n explorer $(kubectl get pods -n explorer -l container=knoxautopolicy -o custom-columns=:metadata.name) > /tmp/discovery-describe-pod.txt
          kubectl exec -it -n kube-system $(kubectl get pods -n kube-system -l kubearmor-app=kubearmor -o custom-columns=:metadata.name) -- cat /tmp/kubearmor.log > /tmp/kubearmor.log
          kubectl logs -n explorer $(kubectl get pods -n explorer -l container=knoxautopolicy -o custom-columns=:metadata.name) > /tmp/discoveryengine.log

      - name: Archive log artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: IntegrationTestsArtifacts
          path: |
            /tmp/k8s-status.txt
            /tmp/kubearmor.log
            /tmp/observe.json
            /tmp/discoveryengine.log
            /tmp/discovery-describe-pod.txt

